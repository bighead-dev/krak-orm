<?php

namespace Km\Event;

/**
 * Event Registration model
 *
 * Event registrations are tied to riders, events, and divisions.
 * This is an api model.
 *
 * @author RJ Garcia <rj@bighead.net>
 * @package Ewt Model
 */
class Registration extends \Krak\Model\Api
{
	protected $created_field	= 'created_at';
	protected $updated_field	= 'updated_at';
	
	public static $valid_options = array(
		'division'	=> true
	);
	
	public static $valid_fields	= array(
		'id'					=> 'event_registrations.id',
		'ride_side'				=> 'event_registrations.preferred_side_is_port',
		'created_at'			=> 'event_registrations.created_at',
		
		'primary_division.id'	=> 'event_registrations.primary_division_id',
		'primary_division.name'	=> array(
			'primary_division.name as primary_division_name',
			'primary_division'
		),
		'primary_division.long_name'	=> array(
			'primary_division.long_name as primary_division_long_name',
			'primary_division'
		),
		'event.id'				=> 'event_registrations.event_id',
		'event.name'			=> array(
			'events.name as event_name',
			'event'
		),
		'rider.id'				=> 'event_registrations.rider_id',
		'rider.name'			=> array(
			'riders.first_name as rider_first_name, riders.last_name as rider_last_name',
			'rider'
		),
		'rider.email'			=> array(
			'riders.email as rider_email',
			'rider'
		),
		'rider.gender'			=> array(
			'riders.gender as rider_gender',
			'rider'
		),
		'rider.age'				=> array(
			'riders.birth_date as rider_birth_date',
			'rider'
		),
		'rider.location'		=> array(
			'riders.city as rider_city, riders.state as rider_state',
			'rider'
		),
		'order.id'				=> array(
			'orders.id as order_id',
			'order'
		),
		'order.order_status'	=> array(
			'orders.order_status_id',
			'order'
		),
		'divisions'				=> true,	// special case that needs it's own model
	);
	
	public static $valid_wheres	= array(
		'event'			=> 'event_registrations.event_id',
		'division_id'	=> array(
			'divisions_event_registrations.division_id',
			'divisions_event_registrations'
		)
	);
	
	public static $valid_sorts	= array(
		'created_at' => 'event_registrations.created_at',
	);
	
	public function api_process_where($key, &$data)
	{
		static $event_m = null;
		
		switch ($key)
		{
			case 'event':
				$event_m = ($event_m) ?: new \Km\Event();
				$data = $event_m->slug_to_id($data);
				break;
		}
	}
	
	public function api_build_join($joins, $j_type)
	{
		if (array_key_exists('event', $joins))
		{
			$this->db->join('events', 'events.id = event_registrations.event_id', $j_type, false);
		}
		
		if (array_key_exists('rider', $joins))
		{
			$this->db->join('riders', 'riders.id = event_registrations.rider_id', $j_type, false);
		}
		
		if (array_key_exists('order', $joins))
		{
			$this->db->join('orders', 'event_id, rider_id', $j_type, false);	// this join will use 'USING' instead of 'ON'
		}
		
		if (array_key_exists('primary_division', $joins))
		{
			$this->db->join('divisions as primary_division', 'primary_division.id = event_registrations.primary_division_id', $j_type, false);
		}
		
		if (array_key_exists('divisions_event_registrations', $joins))
		{
			$this->db->join('divisions_event_registrations', 'divisions_event_registrations.event_registration_id = event_registrations.id', $j_type, false);
			$this->db->group_by('event_registrations.id', false);
		}
	}
	
	public function api_options_build_join($joins)
	{
		if (array_key_exists('divisions_event_registrations', $joins))
		{
			$this->db->join('divisions_event_registrations', 'divisions_event_registrations.event_registration_id = event_registrations.id', 'inner', false);
		}
	}
}
